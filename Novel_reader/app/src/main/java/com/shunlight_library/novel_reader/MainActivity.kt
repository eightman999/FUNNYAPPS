package com.shunlight_library.novel_reader

import android.os.Bundle
import android.view.WindowManager
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.view.WindowCompat
import com.shunlight_library.novel_reader.ui.theme.Novel_readerTheme
import com.shunlight_library.novel_reader.ui.theme.LightOrange
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // „Çπ„ÉÜ„Éº„Çø„Çπ„Éê„Éº„ÇíÂÆåÂÖ®„Å´ÈùûË°®Á§∫„Å´„Åô„Çã
        window.setFlags(
            WindowManager.LayoutParams.FLAG_FULLSCREEN,
            WindowManager.LayoutParams.FLAG_FULLSCREEN
        )

        // „Ç®„ÉÉ„Ç∏„ÉÑ„Éº„Ç®„ÉÉ„Ç∏Ë°®Á§∫„ÇíÊúâÂäπÂåñ
        enableEdgeToEdge()

        // „Ç∑„Çπ„ÉÜ„É†„Éê„Éº„ÇíÈùûË°®Á§∫„Å´„Åó„Å¶„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí„Åù„ÅÆ‰∏ã„Å´Ë°®Á§∫
        WindowCompat.setDecorFitsSystemWindows(window, false)

        setContent {
            Novel_readerTheme {
                NovelReaderApp()
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NovelReaderApp() {
    var showSettings by remember { mutableStateOf(false) }

    // Ë®≠ÂÆöÁîªÈù¢„ÅÆË°®Á§∫
    if (showSettings) {
        SettingsScreen(onBack = { showSettings = false })
    } else {
        // „É°„Ç§„É≥ÁîªÈù¢
        Scaffold { innerPadding ->
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                // Êñ∞ÁùÄ„ÉªÊõ¥Êñ∞ÊÉÖÂ†±„Çª„ÇØ„Ç∑„Éß„É≥
                item {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(LightOrange)
                            .padding(16.dp)
                    ) {
                        Text(
                            text = "Êñ∞ÁùÄ„ÉªÊõ¥Êñ∞ÊÉÖÂ†±",
                            color = Color.White,
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Normal
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "Êñ∞ÁùÄ1‰ª∂„ÉªÊõ¥Êñ∞„ÅÇ„Çä0‰ª∂",
                            color = Color.White,
                            fontSize = 28.sp,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text(
                            text = "ÊúÄÂæå„Å´Èñã„ÅÑ„Å¶„ÅÑ„ÅüÂ∞èË™¨",
                            color = Color.White,
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Normal
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "ReÔºö„Çº„É≠„Åã„ÇâÂßã„ÇÅ„ÇãÁï∞‰∏ñÁïåÁîüÊ¥ª 1Ë©±",
                            color = Color.White,
                            fontSize = 28.sp,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                    }
                }

                // Â∞èË™¨„Çí„Åï„Åå„Åô„Çª„ÇØ„Ç∑„Éß„É≥
                item {
                    SectionHeader(title = "Â∞èË™¨„Çí„Åï„Åå„Åô")
                }

                // „É©„É≥„Ç≠„É≥„Ç∞„Å®Pickup
                item {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        MenuButton(
                            icon = "‚ö™‚ö™‚ö™",
                            text = "„É©„É≥„Ç≠„É≥„Ç∞",
                            onClick = {}
                        )
                        MenuButton(
                            icon = "üì¢",
                            text = "PickUp!",
                            onClick = {}
                        )
                    }
                }

                // „Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢„Å®Ë©≥Á¥∞Ê§úÁ¥¢
                item {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        MenuButton(
                            icon = "üîç",
                            text = "„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢",
                            onClick = {}
                        )
                        MenuButton(
                            icon = ">",
                            text = "Ë©≥Á¥∞Ê§úÁ¥¢",
                            onClick = {}
                        )
                    }
                }

                // „Éé„ÇØ„Çø„Éº„É≥„Éé„Éô„É´„Ç∫„Å®„É†„Éº„É≥„É©„Ç§„Éà„Éé„Éô„É´„Ç∫
                item {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        MenuButton(
                            icon = "üëë",
                            text = "„Éé„ÇØ„Çø„Éº„É≥„Éé„Éô„É´„Ç∫",
                            onClick = {}
                        )
                        MenuButton(
                            icon = "üåô",
                            text = "„É†„Éº„É≥„É©„Ç§„Éà„Éé„Éô„É´„Ç∫",
                            onClick = {}
                        )
                    }
                }

                // Â∞èË™¨„ÇíË™≠„ÇÄ„Çª„ÇØ„Ç∑„Éß„É≥
                item {
                    SectionHeader(title = "Â∞èË™¨„ÇíË™≠„ÇÄ")
                }

                // Â∞èË™¨‰∏ÄË¶ß„Å®ÊúÄËøëÊõ¥Êñ∞„Åï„Çå„ÅüÂ∞èË™¨
                item {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        MenuButton(
                            icon = "üìö",
                            text = "Â∞èË™¨‰∏ÄË¶ß",
                            onClick = {}
                        )
                        MenuButton(
                            icon = ">",
                            text = "ÊúÄËøëÊõ¥Êñ∞„Åï„Çå„ÅüÂ∞èË™¨",
                            onClick = {}
                        )
                    }
                }

                // ÊúÄËøëË™≠„Çì„Å†Â∞èË™¨„Å®‰ΩúËÄÖÂà•„Éª„Ç∑„É™„Éº„Ç∫Âà•
                item {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        MenuButton(
                            icon = ">",
                            text = "ÊúÄËøëË™≠„Çì„Å†Â∞èË™¨",
                            onClick = {}
                        )
                        MenuButton(
                            icon = ">",
                            text = "‰ΩúËÄÖÂà•„Éª„Ç∑„É™„Éº„Ç∫Âà•",
                            onClick = {}
                        )
                    }
                }

                // „Çø„Ç∞Ê§úÁ¥¢
                item {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalArrangement = Arrangement.Start
                    ) {
                        MenuButton(
                            icon = ">",
                            text = "„Çø„Ç∞Ê§úÁ¥¢",
                            onClick = {},
                            modifier = Modifier.width(180.dp)
                        )
                    }
                }

                // „Ç™„Éó„Ç∑„Éß„É≥„Çª„ÇØ„Ç∑„Éß„É≥
                item {
                    SectionHeader(title = "„Ç™„Éó„Ç∑„Éß„É≥")
                }

                // „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁä∂Ê≥Å„Å®Ë®≠ÂÆö
                item {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        MenuButton(
                            icon = "‚¨á",
                            text = "„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁä∂Ê≥Å",
                            onClick = {}
                        )
                        MenuButton(
                            icon = "‚öô",
                            text = "Ë®≠ÂÆö",
                            onClick = { showSettings = true }
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun SectionHeader(title: String) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.LightGray.copy(alpha = 0.3f))
            .padding(16.dp)
    ) {
        Text(
            text = title,
            color = Color.Gray,
            fontSize = 18.sp
        )
    }
}

@Composable
fun MenuButton(
    icon: String,
    text: String,
    onClick: () -> Unit,
    modifier: Modifier = Modifier.width(160.dp)
) {
    Row(
        modifier = modifier
            .clickable(onClick = onClick)
            .padding(8.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = icon,
            fontSize = 24.sp,
            modifier = Modifier.padding(end = 8.dp)
        )
        Text(
            text = text,
            fontSize = 16.sp
        )
    }
}