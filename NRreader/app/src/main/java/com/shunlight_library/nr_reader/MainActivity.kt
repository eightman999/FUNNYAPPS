package com.shunlight_library.nr_reader

import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.WindowManager
import android.webkit.WebView
import android.webkit.WebViewClient
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.core.view.WindowCompat
import com.shunlight_library.nr_reader.ui.theme.LocalAppSettings
import com.shunlight_library.nr_reader.ui.theme.NRreaderTheme
import com.shunlight_library.nr_reader.ui.theme.backgroundColorValue
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import java.io.File

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Hide the status bar completely
        window.setFlags(
            WindowManager.LayoutParams.FLAG_FULLSCREEN,
            WindowManager.LayoutParams.FLAG_FULLSCREEN
        )

        // Make the app content go edge-to-edge
        enableEdgeToEdge()

        // Hide the system bars and make the content draw under them
        WindowCompat.setDecorFitsSystemWindows(window, false)

        setContent {
            NRreaderTheme {
                NovelReaderApp()
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NovelReaderApp() {
    val lightBlue = Color(0xFF80C8FF)
    var showWebView by remember { mutableStateOf(false) }
    var showSettings by remember { mutableStateOf(false) }
    var showNovelList by remember { mutableStateOf(false) }
    var currentTitle by remember { mutableStateOf("") }
    var currentUrl by remember { mutableStateOf("") }

    val context = LocalContext.current
    val settingsStore = remember { SettingsStore(context) }
    val scope = rememberCoroutineScope()
    val parser = remember { NovelParser(context) }

    // Ë®≠ÂÆöÊÉÖÂ†±„ÇíÂèñÂæó
    var selfServerPath by remember { mutableStateOf("") }
    var selfServerAccess by remember { mutableStateOf(false) }

    // „Ç¢„Éó„É™Ëµ∑ÂãïÊôÇ„Å´Ë®≠ÂÆöÊÉÖÂ†±„ÇíË™≠„ÅøËæº„ÇÄ
    LaunchedEffect(key1 = true) {
        settingsStore.selfServerPath.collect { path ->
            if (path != selfServerPath) {
                selfServerPath = path
                // „Éë„Çπ„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÂ†¥Âêà„ÅØ„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Ç¢
                parser.clearCache()
                Log.d("NovelReaderApp", "„Çµ„Éº„Éê„Éº„Éë„Çπ„ÇíÊõ¥Êñ∞: $path")
            }
        }
    }

    // selfServerAccess„ÅÆË®≠ÂÆö„ÇÇÁõ£Ë¶ñ
    LaunchedEffect(key1 = true) {
        settingsStore.selfServerAccess.collect { enabled ->
            selfServerAccess = enabled
            Log.d("NovelReaderApp", "„Çµ„Éº„Éê„Éº„Ç¢„ÇØ„Çª„ÇπË®≠ÂÆö„ÇíÊõ¥Êñ∞: $enabled")
        }
    }

    // Ë®≠ÂÆöÁîªÈù¢„ÅÆË°®Á§∫
    if (showSettings) {
        SettingsScreen(onBack = { showSettings = false })
    }
    // Â∞èË™¨‰∏ÄË¶ß„ÅÆË°®Á§∫
    else if (showNovelList) {
        NovelListScreen(
            selfServerPath = selfServerPath,
            selfServerAccess = selfServerAccess,
            onNovelSelected = { novel ->
                if (selfServerAccess && selfServerPath.isNotEmpty()) {
                    val uri = Uri.parse(selfServerPath)
                    val baseDir = uri.path?.let { File(it).parentFile?.path } ?: ""
                    val novelUrl = "file://$baseDir/novels/${novel.ncode}/index.html"
                    currentTitle = novel.title
                    currentUrl = novelUrl
                    showWebView = true
                    showNovelList = false
                } else {
                    // Â∞èË™¨„Çí„Ç™„É≥„É©„Ç§„É≥„ÅßÈñã„Åè
                    currentTitle = novel.title
                    currentUrl = "https://ncode.syosetu.com/${novel.ncode}/"
                    showWebView = true
                    showNovelList = false
                }
            },
            onBack = { showNovelList = false }
        )
    }
    // WebView„ÅÆË°®Á§∫
    else if (showWebView) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = { Text(text = currentTitle) },
                    navigationIcon = {
                        IconButton(onClick = { showWebView = false }) {
                            Icon(Icons.Default.ArrowBack, contentDescription = "Êàª„Çã")
                        }
                    },
                    actions = {
                        IconButton(onClick = { /* Êñ∞„Åó„ÅÑ„Çø„Éñ„ÇíËøΩÂä†„Åô„ÇãÂá¶ÁêÜ */ }) {
                            Icon(Icons.Default.Add, contentDescription = "Êñ∞„Åó„ÅÑ„Çø„Éñ„ÇíËøΩÂä†")
                        }
                    }
                )
            }
        ) { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding)) {
                WebViewScreen(url = currentUrl)
            }
        }
    }
    // „É°„Ç§„É≥ÁîªÈù¢„ÅÆË°®Á§∫
    else {
        // Get the current app settings
        val appSettings = LocalAppSettings.current

        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .background(appSettings.backgroundColorValue)
        ) {
            // ‰∏äÈÉ®„Çª„ÇØ„Ç∑„Éß„É≥ - Êñ∞ÁùÄ„ÉªÊõ¥Êñ∞ÊÉÖÂ†±
            item {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(lightBlue)
                        .padding(16.dp)
                ) {
                    Text(
                        text = "Êñ∞ÁùÄ„ÉªÊõ¥Êñ∞ÊÉÖÂ†±",
                        color = Color.White,
                        fontSize = 18.sp
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "Êñ∞ÁùÄ1‰ª∂„ÉªÊõ¥Êñ∞„ÅÇ„Çä0‰ª∂",
                        color = Color.White,
                        fontSize = 24.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                    Text(
                        text = "ÊúÄÂæå„Å´Èñã„ÅÑ„Å¶„ÅÑ„ÅüÂ∞èË™¨",
                        color = Color.White,
                        fontSize = 18.sp
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "ReÔºö„Çº„É≠„Åã„ÇâÂßã„ÇÅ„ÇãÁï∞‰∏ñÁïåÁîüÊ¥ª 1Ë©±",
                        color = Color.White,
                        fontSize = 24.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                }
            }

            // „ÄåÂ∞èË™¨„Çí„Åï„Åå„Åô„Äç„Çª„ÇØ„Ç∑„Éß„É≥
            item {
                SectionHeader(title = "Â∞èË™¨„Çí„Åï„Åå„Åô")
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    NavButton(
                        title = "„É©„É≥„Ç≠„É≥„Ç∞",
                        icon = "üèÜ",
                        onClick = {
                            currentTitle = "„É©„É≥„Ç≠„É≥„Ç∞"
                            currentUrl = "https://yomou.syosetu.com/rank/top/"
                            showWebView = true
                        }
                    )
                    NavButton(
                        title = "PickUp!",
                        icon = "üì¢",
                        onClick = {
                            currentTitle = "PickUp!"
                            currentUrl = "https://syosetu.com/pickup/list/"
                            showWebView = true
                        }
                    )
                }
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    NavButton(
                        title = "„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢",
                        icon = "üîç",
                        onClick = {
                            currentTitle = "„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢"
                            currentUrl = "https://yomou.syosetu.com/search.php"
                            showWebView = true
                        }
                    )
                    NavButton(
                        title = "Ë©≥Á¥∞Ê§úÁ¥¢",
                        icon = "‚ñ∂",
                        onClick = {
                            currentTitle = "Ë©≥Á¥∞Ê§úÁ¥¢"
                            currentUrl = "https://yomou.syosetu.com/search.php"
                            showWebView = true
                        }
                    )
                }
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    NavButton(
                        title = "„Éé„ÇØ„Çø„Éº„É≥„Éé„Éô„É´„Ç∫",
                        icon = "üëë",
                        onClick = {
                            currentTitle = "„Éé„ÇØ„Çø„Éº„É≥„Éé„Éô„É´„Ç∫"
                            currentUrl = "https://noc.syosetu.com/top/top/"
                            showWebView = true
                        }
                    )
                    NavButton(
                        title = "„É†„Éº„É≥„É©„Ç§„Éà„Éé„Éô„É´„Ç∫",
                        icon = "üëë",
                        onClick = {
                            currentTitle = "„É†„Éº„É≥„É©„Ç§„Éà„Éé„Éô„É´„Ç∫"
                            currentUrl = "https://mnlt.syosetu.com/top/top/"
                            showWebView = true
                        }
                    )
                }
                // „Éü„ÉÉ„Éâ„Éä„Ç§„Éà„Éé„Éô„É´„Ç∫„ÅÆËøΩÂä†
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.Start
                ) {
                    NavButton(
                        title = "„Éü„ÉÉ„Éâ„Éä„Ç§„Éà„Éé„Éô„É´„Ç∫",
                        icon = "üëë",
                        onClick = {
                            currentTitle = "„Éü„ÉÉ„Éâ„Éä„Ç§„Éà„Éé„Éô„É´„Ç∫"
                            currentUrl = "https://mid.syosetu.com/top/top/"
                            showWebView = true
                        }
                    )
                }
            }

            // „ÄåÂ∞èË™¨„ÇíË™≠„ÇÄ„Äç„Çª„ÇØ„Ç∑„Éß„É≥
            item {
                SectionHeader(title = "Â∞èË™¨„ÇíË™≠„ÇÄ")
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    NavButton(
                        title = "Â∞èË™¨‰∏ÄË¶ß",
                        icon = "üìö",
                        onClick = {
                            showNovelList = true
                        }
                    )
                    NavButton(title = "ÊúÄËøëÊõ¥Êñ∞„Åï„Çå„ÅüÂ∞èË™¨", icon = "‚ñ∂")
                }
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    NavButton(title = "ÊúÄËøëË™≠„Çì„Å†Â∞èË™¨", icon = "‚ñ∂")
                    NavButton(title = "‰ΩúËÄÖÂà•„Éª„Ç∑„É™„Éº„Ç∫Âà•", icon = "‚ñ∂")
                }
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    NavButton(title = "„Çø„Ç∞Ê§úÁ¥¢", icon = "‚ñ∂")
                    Spacer(modifier = Modifier.width(160.dp))
                }
            }

            // „Äå„Ç™„Éó„Ç∑„Éß„É≥„Äç„Çª„ÇØ„Ç∑„Éß„É≥
            item {
                SectionHeader(title = "„Ç™„Éó„Ç∑„Éß„É≥")
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    NavButton(title = "„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁä∂Ê≥Å", icon = "‚¨á")
                    NavButton(
                        title = "Ë®≠ÂÆö",
                        icon = "‚öô",
                        onClick = { showSettings = true }
                    )
                }
                // „Çπ„Éö„Éº„ÇπËøΩÂä†
                Spacer(modifier = Modifier.height(100.dp))
            }
        }
    }
}

@Composable
fun WebViewScreen(url: String) {
    val context = LocalContext.current

    AndroidView(
        factory = { context ->
            WebView(context).apply {
                webViewClient = WebViewClient()
                settings.javaScriptEnabled = true
                loadUrl(url)
            }
        },
        modifier = Modifier.fillMaxSize()
    )
}

@Composable
fun SectionHeader(title: String) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.LightGray.copy(alpha = 0.3f))
            .padding(16.dp)
    ) {
        Text(
            text = title,
            color = Color.Gray,
            fontSize = 18.sp
        )
    }
}

@Composable
fun NavButton(
    title: String,
    icon: String,
    onClick: () -> Unit = {}
) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier.clickable(onClick = onClick)
    ) {
        Text(
            text = icon,
            fontSize = 20.sp
        )
        Spacer(modifier = Modifier.width(8.dp))
        Text(
            text = title,
            fontSize = 16.sp
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NovelListScreen(
    selfServerPath: String,
    selfServerAccess: Boolean,
    onNovelSelected: (Novel) -> Unit,
    onBack: () -> Unit
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    val parser = remember { NovelParser(context) }
    var novels by remember { mutableStateOf<List<Novel>>(emptyList()) }
    var isLoading by remember { mutableStateOf(true) }
    var errorMessage by remember { mutableStateOf<String?>(null) }

    // „Ç≠„É£„ÉÉ„Ç∑„É•„ÉÅ„Çß„ÉÉ„ÇØ„Å®„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
    LaunchedEffect(key1 = selfServerPath, key2 = selfServerAccess) {
        isLoading = true
        errorMessage = null

        if (selfServerAccess && selfServerPath.isNotEmpty()) {
            try {
                Log.d("NovelListScreen", "Loading novels from server path: $selfServerPath")

                // Êó¢„Å´„Ç≠„É£„ÉÉ„Ç∑„É•„Åå„ÅÇ„Çå„Å∞„Åù„Çå„Çí‰ΩøÁî®
                if (NovelParserCache.hasCachedNovels(selfServerPath)) {
                    Log.d("NovelListScreen", "„Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâÂ∞èË™¨„É™„Çπ„Éà„ÇíË™≠„ÅøËæº„Åø„Åæ„Åô")
                    novels = NovelParserCache.getCachedNovels()
                } else {
                    Log.d("NovelListScreen", "„Çµ„Éº„Éê„Éº„Åã„ÇâÂ∞èË™¨„É™„Çπ„Éà„ÇíË™≠„ÅøËæº„Åø„Åæ„Åô")
                    val result = parser.parseNovelListFromServerPath(selfServerPath)
                    Log.d("NovelListScreen", "Loaded ${result.size} novels from server")
                    novels = result
                }
            } catch (e: Exception) {
                Log.e("NovelListScreen", "Error loading novels", e)
                errorMessage = "Â∞èË™¨‰∏ÄË¶ß„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${e.message}"
            }
        } else {
            // „ÉÜ„Çπ„ÉàÁî®„ÅÆ„ÉÄ„Éü„Éº„Éá„Éº„Çø
            Log.d("NovelListScreen", "Using dummy novel data")
            novels = listOf(
                Novel("Re:„Çº„É≠„Åã„ÇâÂßã„ÇÅ„ÇãÁï∞‰∏ñÁïåÁîüÊ¥ª", "n9876543210"),
                Novel("Ëª¢Áîü„Åó„Åü„Çâ„Çπ„É©„Ç§„É†„Å†„Å£„Åü‰ª∂", "n1234567890"),
                Novel("„Ç™„Éº„Éê„Éº„É≠„Éº„Éâ", "n0987654321")
            )
        }

        isLoading = false

    }

    // UIÈÉ®ÂàÜÔºàÂ§âÊõ¥„Å™„ÅóÔºâ
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Â∞èË™¨‰∏ÄË¶ß") },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Êàª„Çã")
                    }
                }
            )
        }
    ) { innerPadding ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
        ) {
            if (isLoading) {
                CircularProgressIndicator(
                    modifier = Modifier.align(Alignment.Center)
                )
            } else if (errorMessage != null) {
                Column(
                    modifier = Modifier
                        .align(Alignment.Center)
                        .padding(16.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = errorMessage ?: "",
                        color = MaterialTheme.colorScheme.error
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                    Button(onClick = onBack) {
                        Text("Êàª„Çã")
                    }
                }
            } else if (novels.isEmpty()) {
                Column(
                    modifier = Modifier
                        .align(Alignment.Center)
                        .padding(16.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text("Â∞èË™¨„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
                    Spacer(modifier = Modifier.height(16.dp))
                    if (selfServerAccess) {
                        Text(
                            text = "Ëá™Â∑±„Çµ„Éº„Éê„Éº„ÅÆ„Éë„Çπ: $selfServerPath",
                            style = MaterialTheme.typography.bodySmall
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Button(onClick = {
                            // „Éá„Éê„ÉÉ„Ç∞Áî®„Å´ÁèæÂú®„ÅÆ„Éë„Çπ„ÇíË°®Á§∫
                            Log.d("NovelListScreen", "Current server path: $selfServerPath")
                        }) {
                            Text("„Éë„ÇπÊÉÖÂ†±„ÇíÁ¢∫Ë™ç")
                        }
                    }
                }
            } else {
                LazyColumn(modifier = Modifier.fillMaxSize()) {
                    items(novels) { novel ->
                        NovelItem(
                            novel = novel,
                            onClick = { onNovelSelected(novel) }
                        )
                    }
                }
            }
        }
    }
}
@Composable
fun NovelItem(
    novel: Novel,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp)
            .clickable(onClick = onClick)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Text(
                text = novel.title,
                style = MaterialTheme.typography.titleMedium
            )
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = "ÊúÄÂæå„Å´Ë™≠„Çì„Å†: ${novel.lastReadEpisode}Ë©±",
                style = MaterialTheme.typography.bodySmall
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun NovelReaderAppPreview() {
    NRreaderTheme {
        NovelReaderApp()
    }
}